main: VAVERS
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##
main_ligne: VAVERS
##
## Ends in an error in state: 108.
##
## main_ligne' -> . main_ligne [ # ]
##
## The known suffix of the stack is as follows:
##
##

Numéro de ligne manquant.

main: INT STRING
##
## Ends in an error in state: 1.
##
## ligne -> INT . loption(separated_nonempty_list(SEMI,instr)) [ EOF CR ]
##
## The known suffix of the stack is as follows:
## INT
##

Instruction attendue après le numéro de ligne.

main: INT VAVERS VAVERS
##
## Ends in an error in state: 2.
##
## instr -> VAVERS . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## VAVERS
##

Expression attendue après 'VAVERS'.

main: INT IMPRIME PLUS VAVERS
##
## Ends in an error in state: 5.
##
## expr -> PLUS . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## PLUS
##

Opérande attendu après le signe '+'.

main: INT IMPRIME PG VAVERS
##
## Ends in an error in state: 6.
##
## expr -> PG . expr PD [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## PG
##

Expression attendue entre parenthèses.

main: INT IMPRIME PAS VAVERS
##
## Ends in an error in state: 7.
##
## expr -> PAS . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## PAS
##

Expression attendue après 'PAS' pour négation.

main: INT IMPRIME MOINS VAVERS
##
## Ends in an error in state: 8.
##
## expr -> MOINS . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## MOINS
##

Expression attendue après le signe '-' pour une opération ou négation.

main: INT IMPRIME MOINS VAR VAVERS
##
## Ends in an error in state: 11.
##
## expr -> MOINS expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## MOINS expr
##
main: INT IMPRIME PAS VAR VAVERS
##
## Ends in an error in state: 16.
##
## expr -> PAS expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## PAS expr
##
main: INT IMPRIME VAR PLUS VAR VAVERS
##
## Ends in an error in state: 18.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr PLUS expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##
main: INT IMPRIME VAR NEQ VAR VAVERS
##
## Ends in an error in state: 20.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr NEQ expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##
main: INT IMPRIME VAR MOINS VAR VAVERS
##
## Ends in an error in state: 22.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr MOINS expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr MOINS expr
##
main: INT IMPRIME VAR LTE VAR VAVERS
##
## Ends in an error in state: 24.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr LTE expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr LTE expr
##
main: INT IMPRIME VAR LT VAR VAVERS
##
## Ends in an error in state: 26.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr LT expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##
main: INT IMPRIME VAR GTE VAR VAVERS
##
## Ends in an error in state: 28.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr GTE expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr GTE expr
##
main: INT IMPRIME VAR GT VAR VAVERS
##
## Ends in an error in state: 30.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr GT expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##
main: INT IMPRIME VAR EQ VAR VAVERS
##
## Ends in an error in state: 32.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr EQ expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##
main: INT IMPRIME VAR OU VAR VAVERS
##
## Ends in an error in state: 37.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr OU expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr OU expr
##
main: INT IMPRIME VAR ET VAR VAVERS
##
## Ends in an error in state: 39.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr ET expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr ET expr
##
main: INT IMPRIME PLUS VAR VAVERS
##
## Ends in an error in state: 43.
##
## expr -> PLUS expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## PLUS expr
##
main: INT IMPRIME VAR QUESTION VAR COLON VAVERS
##
## Ends in an error in state: 40.
##
## expr -> expr QUESTION expr COLON . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr QUESTION expr COLON
##
main: INT IMPRIME VAR MULT VAVERS
##
## Ends in an error in state: 12.
##
## expr -> expr MULT . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr MULT
##
main: INT IMPRIME VAR DIV VAVERS
##
## Ends in an error in state: 14.
##
## expr -> expr DIV . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##
main: INT IMPRIME VAR PLUS VAVERS
##
## Ends in an error in state: 17.
##
## expr -> expr PLUS . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##
main: INT IMPRIME VAR NEQ VAVERS
##
## Ends in an error in state: 19.
##
## expr -> expr NEQ . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##
main: INT IMPRIME VAR MOINS VAVERS
##
## Ends in an error in state: 21.
##
## expr -> expr MOINS . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr MOINS
##
main: INT IMPRIME VAR LTE VAVERS
##
## Ends in an error in state: 23.
##
## expr -> expr LTE . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr LTE
##
main: INT IMPRIME VAR LT VAVERS
##
## Ends in an error in state: 25.
##
## expr -> expr LT . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr LT
##
main: INT IMPRIME VAR GTE VAVERS
##
## Ends in an error in state: 27.
##
## expr -> expr GTE . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr GTE
##
main: INT IMPRIME VAR GT VAVERS
##
## Ends in an error in state: 29.
##
## expr -> expr GT . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr GT
##
main: INT IMPRIME VAR EQ VAVERS
##
## Ends in an error in state: 31.
##
## expr -> expr EQ . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr EQ
##
main: INT IMPRIME VAR QUESTION VAVERS
##
## Ends in an error in state: 34.
##
## expr -> expr QUESTION . expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr QUESTION
##
main: INT IMPRIME VAR QUESTION VAR SINON
##
## Ends in an error in state: 35.
##
## expr -> expr . NEQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . LTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . LT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . GT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . GTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . EQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . ET expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . OU expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . PLUS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . MOINS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . MULT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . DIV expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr . QUESTION expr COLON expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV COLON ]
## expr -> expr QUESTION expr . COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr QUESTION expr
##
main: INT IMPRIME VAR OU VAVERS
##
## Ends in an error in state: 36.
##
## expr -> expr OU . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr OU
##
main: INT IMPRIME VAR ET VAVERS
##
## Ends in an error in state: 38.
##
## expr -> expr ET . expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr ET
##
main: INT IMPRIME VAR QUESTION VAR COLON VAR VAVERS
##
## Ends in an error in state: 41.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr QUESTION expr COLON expr . [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
##
## The known suffix of the stack is as follows:
## expr QUESTION expr COLON expr
##
main: INT SI VAVERS
##
## Ends in an error in state: 47.
##
## instr_cond -> SI . expr ALORS instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SI . expr ALORS instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SI
##
main: INT SAUF SI VAVERS
##
## Ends in an error in state: 51.
##
## instr_cond -> SAUF SI . expr ALORS instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SAUF SI . expr ALORS instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF SI
##
main: INT IMPRIME VAVERS
##
## Ends in an error in state: 58.
##
## instr -> IMPRIME . separated_nonempty_list(COMMA,expr) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## IMPRIME
##
main: INT IMPRIME VAR COMMA VAVERS
##
## Ends in an error in state: 61.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##
main: INT VAR PLUS EQ VAVERS
##
## Ends in an error in state: 72.
##
## instr_assign -> var PLUS EQ . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var PLUS EQ
##
main: INT VAR MULT EQ VAVERS
##
## Ends in an error in state: 75.
##
## instr_assign -> var MULT EQ . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MULT EQ
##
main: INT VAR MOINS EQ VAVERS
##
## Ends in an error in state: 78.
##
## instr_assign -> var MOINS EQ . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MOINS EQ
##
main: INT VAR DIV EQ VAVERS
##
## Ends in an error in state: 81.
##
## instr_assign -> var DIV EQ . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var DIV EQ
##
main: INT VAR EQ VAVERS
##
## Ends in an error in state: 85.
##
## instr_assign -> separated_nonempty_list(COMMA,var) EQ . separated_nonempty_list(COMMA,expr) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,var) EQ
##
main: INT SOUSROUTINE VAVERS
##
## Ends in an error in state: 45.
##
## instr -> SOUSROUTINE . expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SOUSROUTINE
##
main: INT SOUSROUTINE VAR PD
##
## Ends in an error in state: 46.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr -> SOUSROUTINE expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SOUSROUTINE expr
##

Expression attendue.

main: INT IMPRIME VAR PD
##
## Ends in an error in state: 60.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA AD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ SINON SEMI EOF CR AD ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## expr
##
main: INT VAR PLUS EQ VAR PD
##
## Ends in an error in state: 73.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr_assign -> var PLUS EQ expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var PLUS EQ expr
##
main: INT VAR MULT EQ VAR PD
##
## Ends in an error in state: 76.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr_assign -> var MULT EQ expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MULT EQ expr
##
main: INT VAR MOINS EQ VAR PD
##
## Ends in an error in state: 79.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr_assign -> var MOINS EQ expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MOINS EQ expr
##
main: INT VAR DIV EQ VAR PD
##
## Ends in an error in state: 82.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr_assign -> var DIV EQ expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var DIV EQ expr
##

Paranthèse fermante ')' inattendue.


main: INT IMPRIME PG VAR SINON
##
## Ends in an error in state: 33.
##
## expr -> PG expr . PD [ SINON SEMI QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR COMMA COLON ALORS AD ]
## expr -> expr . NEQ expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . LTE expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . LT expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . GT expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . GTE expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . EQ expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . ET expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . OU expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . PLUS expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . MOINS expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . MULT expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . DIV expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
## expr -> expr . QUESTION expr COLON expr [ QUESTION PLUS PD OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ]
##
## The known suffix of the stack is as follows:
## PG expr
##

Fermeture de parenthèse ')' attendue.


main: INT VAVERS VAR PD
##
## Ends in an error in state: 44.
##
## expr -> expr . NEQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . LT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . GTE expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . EQ expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . ET expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . OU expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . PLUS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MOINS expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . MULT expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . DIV expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## expr -> expr . QUESTION expr COLON expr [ SINON SEMI QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ EOF DIV CR AD ]
## instr -> VAVERS expr . [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## VAVERS expr
##

Délimiteur ou opérateur attendu après l'expression.



main: INT SI VAR SINON
##
## Ends in an error in state: 48.
##
## expr -> expr . NEQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . LTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . LT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . GT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . GTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . EQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . ET expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . OU expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . PLUS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . MOINS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . MULT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . DIV expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . QUESTION expr COLON expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## instr_cond -> SI expr . ALORS instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SI expr . ALORS instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SI expr
##

Délimiteur 'ALORS' attendu après l'expression conditionnelle.


main: INT SAUF VAVERS
##
## Ends in an error in state: 50.
##
## instr_cond -> SAUF . SI expr ALORS instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SAUF . SI expr ALORS instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF
##

Mot-clé 'SI' attendu après 'SAUF'.



main: INT SAUF SI VAR SINON
##
## Ends in an error in state: 52.
##
## expr -> expr . NEQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . LTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . LT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . GT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . GTE expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . EQ expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . ET expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . OU expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . PLUS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . MOINS expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . MULT expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . DIV expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## expr -> expr . QUESTION expr COLON expr [ QUESTION PLUS OU NEQ MULT MOINS LTE LT GTE GT ET EQ DIV ALORS ]
## instr_cond -> SAUF SI expr . ALORS instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SAUF SI expr . ALORS instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF SI expr
##

Délimiteur 'ALORS' attendu après l'expression conditionnelle.


main: INT REM VAVERS
##
## Ends in an error in state: 55.
##
## instr -> REM . STRING [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## REM
##

Chaîne de caractères attendue après 'REM'.


main: INT ENTREE VAVERS
##
## Ends in an error in state: 64.
##
## instr -> ENTREE . separated_nonempty_list(COMMA,var) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## ENTREE
##

Variable attendue après 'ENTREE'.

main: INT ENTREE VAR VAVERS
##
## Ends in an error in state: 65.
##
## separated_nonempty_list(COMMA,var) -> var . [ SINON SEMI EQ EOF CR AD ]
## separated_nonempty_list(COMMA,var) -> var . COMMA separated_nonempty_list(COMMA,var) [ SINON SEMI EQ EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var
##

Opérateur ou délimiteur attendu après la variable.

main: INT VAR COMMA VAVERS
##
## Ends in an error in state: 66.
##
## separated_nonempty_list(COMMA,var) -> var COMMA . separated_nonempty_list(COMMA,var) [ SINON SEMI EQ EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var COMMA
##

Variable attendue après ',' pour liste de variables.

main: INT VAR VAVERS
##
## Ends in an error in state: 70.
##
## instr_assign -> var . PLUS EQ expr [ SINON SEMI EOF CR AD ]
## instr_assign -> var . MOINS EQ expr [ SINON SEMI EOF CR AD ]
## instr_assign -> var . MULT EQ expr [ SINON SEMI EOF CR AD ]
## instr_assign -> var . DIV EQ expr [ SINON SEMI EOF CR AD ]
## separated_nonempty_list(COMMA,var) -> var . [ EQ ]
## separated_nonempty_list(COMMA,var) -> var . COMMA separated_nonempty_list(COMMA,var) [ EQ ]
##
## The known suffix of the stack is as follows:
## var
##

Opérateur ou délimiteur attendu après la variable.

main: INT VAR PLUS VAVERS
##
## Ends in an error in state: 71.
##
## instr_assign -> var PLUS . EQ expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var PLUS
##

Opérateur '=' attendu après l'opérateur '+'.




main: INT VAR MULT VAVERS
##
## Ends in an error in state: 74.
##
## instr_assign -> var MULT . EQ expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MULT
##

Opérateur '=' attendu après l'opérateur '*'.




main: INT VAR MOINS VAVERS
##
## Ends in an error in state: 77.
##
## instr_assign -> var MOINS . EQ expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var MOINS
##

Opérateur '=' attendu après l'opérateur '-'.




main: INT VAR DIV VAVERS
##
## Ends in an error in state: 80.
##
## instr_assign -> var DIV . EQ expr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## var DIV
##

Opérateur '=' attendu après l'opérateur '/'.




main: INT VAR COMMA VAR SINON
##
## Ends in an error in state: 84.
##
## instr_assign -> separated_nonempty_list(COMMA,var) . EQ separated_nonempty_list(COMMA,expr) [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,var)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 65, spurious reduction of production separated_nonempty_list(COMMA,var) -> var
## In state 67, spurious reduction of production separated_nonempty_list(COMMA,var) -> var COMMA separated_nonempty_list(COMMA,var)
##

Opérateur '=' attendu pour l'assignation après liste de variables.


main: INT FIN SEMI STRING
##
## Ends in an error in state: 92.
##
## separated_nonempty_list(SEMI,instr) -> instr SEMI . separated_nonempty_list(SEMI,instr) [ EOF CR AD ]
##
## The known suffix of the stack is as follows:
## instr SEMI
##

Instruction attendue après ';'.


main: INT SAUF SI VAR ALORS FIN VAVERS
##
## Ends in an error in state: 94.
##
## instr_cond -> SAUF SI expr ALORS instr . [ SINON SEMI EOF CR AD ]
## instr_cond -> SAUF SI expr ALORS instr . SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF SI expr ALORS instr
##
main: INT SI VAR ALORS FIN VAVERS
##
## Ends in an error in state: 97.
##
## instr_cond -> SI expr ALORS instr . [ SINON SEMI EOF CR AD ]
## instr_cond -> SI expr ALORS instr . SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SI expr ALORS instr
##
main: INT SI VAR ALORS STRING
##
## Ends in an error in state: 49.
##
## instr_cond -> SI expr ALORS . instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SI expr ALORS . instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SI expr ALORS
##
main: INT SAUF SI VAR ALORS STRING
##
## Ends in an error in state: 53.
##
## instr_cond -> SAUF SI expr ALORS . instr [ SINON SEMI EOF CR AD ]
## instr_cond -> SAUF SI expr ALORS . instr SINON instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF SI expr ALORS
##

Instruction attendue après 'ALORS'.

main: INT SAUF SI VAR ALORS FIN SINON STRING
##
## Ends in an error in state: 95.
##
## instr_cond -> SAUF SI expr ALORS instr SINON . instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SAUF SI expr ALORS instr SINON
##
main: INT SI VAR ALORS FIN SINON STRING
##
## Ends in an error in state: 98.
##
## instr_cond -> SI expr ALORS instr SINON . instr [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## SI expr ALORS instr SINON
##

Instruction attendue après 'SINON'.

main_ligne: INT FIN VAVERS
##
## Ends in an error in state: 91.
##
## separated_nonempty_list(SEMI,instr) -> instr . [ EOF CR AD ]
## separated_nonempty_list(SEMI,instr) -> instr . SEMI separated_nonempty_list(SEMI,instr) [ EOF CR AD ]
##
## The known suffix of the stack is as follows:
## instr
##

Fin de ligne attendue.


main: INT CR VAVERS
##
## Ends in an error in state: 106.
##
## separated_nonempty_list(CR,ligne) -> ligne CR . separated_nonempty_list(CR,ligne) [ EOF ]
##
## The known suffix of the stack is as follows:
## ligne CR
##
main_ligne: INT CR
##
## Ends in an error in state: 110.
##
## main_ligne -> ligne . EOF [ # ]
##
## The known suffix of the stack is as follows:
## ligne
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production loption(separated_nonempty_list(SEMI,instr)) ->
## In state 100, spurious reduction of production ligne -> INT loption(separated_nonempty_list(SEMI,instr))
##

Instruction attendue.

main: INT AG STRING
##
## Ends in an error in state: 69.
##
## instr -> AG . loption(separated_nonempty_list(SEMI,instr)) AD [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## AG
##
main: INT AG FIN EOF
##
## Ends in an error in state: 87.
##
## instr -> AG loption(separated_nonempty_list(SEMI,instr)) . AD [ SINON SEMI EOF CR AD ]
##
## The known suffix of the stack is as follows:
## AG loption(separated_nonempty_list(SEMI,instr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 91, spurious reduction of production separated_nonempty_list(SEMI,instr) -> instr
## In state 83, spurious reduction of production loption(separated_nonempty_list(SEMI,instr)) -> separated_nonempty_list(SEMI,instr)
##
main: INT FIN AD
##
## Ends in an error in state: 105.
##
## separated_nonempty_list(CR,ligne) -> ligne . [ EOF ]
## separated_nonempty_list(CR,ligne) -> ligne . CR separated_nonempty_list(CR,ligne) [ EOF ]
##
## The known suffix of the stack is as follows:
## ligne
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 91, spurious reduction of production separated_nonempty_list(SEMI,instr) -> instr
## In state 83, spurious reduction of production loption(separated_nonempty_list(SEMI,instr)) -> separated_nonempty_list(SEMI,instr)
## In state 100, spurious reduction of production ligne -> INT loption(separated_nonempty_list(SEMI,instr))
##

Accolade invalide.
